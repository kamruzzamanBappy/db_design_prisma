// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  id        BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  firstName String   @db.VarChar(100)
  lastName  String?  @db.VarChar(100)
  email     String   @unique @db.VarChar(100)
  mobile    String   @db.VarChar(50)
  password  String   @db.VarChar(100)
  otp       String?  @db.VarChar(50)
  createAt  DateTime @default(now()) @db.Timestamp(0)
  updateAt  DateTime @default(now()) @updatedAt @db.Timestamp(0)

  categories       categories?
  customers        customers?
  products         products?
  invoices         invoices?
  invoice_products invoice_products?
}

model categories {
  id       BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  user_id  BigInt   @unique @db.UnsignedBigInt
  name     String   @db.VarChar(100)
  createAt DateTime @default(now()) @db.Timestamp(0)
  updateAt DateTime @default(now()) @updatedAt @db.Timestamp(0)

  users users @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Cascade)

  products products?
}

model customers {
  id       BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  user_id  BigInt   @unique @db.UnsignedBigInt
  name     String   @db.VarChar(100)
  email    String   @db.VarChar(100)
  mobile   String   @db.VarChar(50)
  createAt DateTime @default(now()) @db.Timestamp(0)
  updateAt DateTime @default(now()) @updatedAt @db.Timestamp(0)

  users users @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Cascade)

  invoices invoices?
}

model products {
  id          BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  user_id     BigInt   @unique @db.UnsignedBigInt
  category_id BigInt   @unique @db.UnsignedBigInt
  name        String   @db.VarChar(100)
  price       String   @db.VarChar(100)
  unit        String   @db.VarChar(100)
  img_url     String   @db.VarChar(100)
  createAt    DateTime @default(now()) @db.Timestamp(0)
  updateAt    DateTime @default(now()) @updatedAt @db.Timestamp(0)

  users      users      @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  categories categories @relation(fields: [category_id], references: [id], onDelete: Restrict, onUpdate: Cascade)

  invoice_products invoice_products?
}

model invoices {
  id          BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  user_id     BigInt   @unique @db.UnsignedBigInt
  customer_id BigInt   @unique @db.UnsignedBigInt
  total       String   @db.VarChar(100)
  discount    String   @db.VarChar(100)
  vat         String   @db.VarChar(100)
  payable     String   @db.VarChar(100)
  createAt    DateTime @default(now()) @db.Timestamp(0)
  updateAt    DateTime @default(now()) @updatedAt @db.Timestamp(0)

  users     users     @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  customers customers @relation(fields: [customer_id], references: [id], onDelete: Restrict, onUpdate: Cascade)

  invoice_products invoice_products?
}

model invoice_products {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  invoice_id BigInt   @unique @db.UnsignedBigInt
  product_id BigInt   @unique @db.UnsignedBigInt
  user_id    BigInt   @unique @db.UnsignedBigInt
  qty        String   @db.VarChar(10)
  sale_price String   @db.VarChar(10)
  createAt   DateTime @default(now()) @db.Timestamp(0)
  updateAt   DateTime @default(now()) @updatedAt @db.Timestamp(0)

  invoices invoices @relation(fields: [invoice_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  products products @relation(fields: [product_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  users    users    @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
}
